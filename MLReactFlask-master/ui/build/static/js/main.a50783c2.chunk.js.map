{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","value","target","name","formData","state","setState","handlePredictClick","isLoading","fetch","headers","Accept","Content-Type","method","body","JSON","stringify","then","response","json","result","handleCancelClick","sepalLength","sepalWidth","petalLength","petalWidth","sepalLengths","i","toFixed","push","react_default","a","createElement","key","sepalWidths","petalLengths","petalWidths","Container_default","className","Form_default","Row","Group","as","Col","Label","Control","onChange","Row_default","Col_default","Button_default","block","variant","disabled","onClick","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a50783c2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      formData: {\n        sepalLength: 4,\n        sepalWidth: 2,\n        petalLength: 1,\n        petalWidth: 0\n      },\n      result: \"\"\n    };\n  }\n\n  handleChange = (event) => {\n    const value = event.target.value;\n    const name = event.target.name;\n    var formData = this.state.formData;\n    formData[name] = value;\n    this.setState({\n      formData\n    });\n  }\n\n  handlePredictClick = (event) => {\n    const formData = this.state.formData;\n    this.setState({ isLoading: true });\n    fetch('http://127.0.0.1:5000/prediction/', \n      {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify(formData)\n      })\n      .then(response => response.json())\n      .then(response => {\n        this.setState({\n          result: response.result,\n          isLoading: false\n        });\n      });\n  }\n\n  handleCancelClick = (event) => {\n    this.setState({ result: \"\" });\n  }\n\n  render() {\n    const isLoading = this.state.isLoading;\n    const formData = this.state.formData;\n    const result = this.state.result;\n\n    var sepalLengths = []\n    for (var i = 4; i <= 7; i = +(i + 0.1).toFixed(1)) {\n      sepalLengths.push(<option key = {i} value = {i}>{i}</option>);\n    }\n    var sepalWidths = []\n    for (var i = 2; i <= 4; i = +(i + 0.1).toFixed(1)) {\n      sepalWidths.push(<option key = {i} value = {i}>{i}</option>);\n    }\n    var petalLengths = []\n    for (var i = 1; i <= 6; i = +(i + 0.1).toFixed(1)){\n      petalLengths.push(<option key = {i} value = {i}>{i}</option>);\n    }\n    var petalWidths = []\n    for (var i = 0.1; i <= 3; i = +(i + 0.1).toFixed(1)) {\n      petalWidths.push(<option key = {i} value = {i}>{i}</option>);\n    }\n    return (\n      <Container>\n        <div>\n          <h1 className=\"title\">Iris Plant Classifier</h1>\n        </div>\n        <div className=\"content\">\n          <Form>\n            <Form.Row>\n              <Form.Group as={Col}>\n                <Form.Label>Sepal Length</Form.Label>\n                <Form.Control \n                  as=\"select\"\n                  value={formData.sepalLength}\n                  name=\"sepalLength\"\n                  onChange={this.handleChange}>\n                  {sepalLengths}\n                </Form.Control>\n              </Form.Group>\n              <Form.Group as={Col}>\n                <Form.Label>Sepal Width</Form.Label>\n                <Form.Control \n                  as=\"select\"\n                  value={formData.sepalWidth}\n                  name=\"sepalWidth\"\n                  onChange={this.handleChange}>\n                  {sepalWidths}\n                </Form.Control>\n              </Form.Group>\n            </Form.Row>\n            <Form.Row>\n              <Form.Group as={Col}>\n                <Form.Label>Petal Length</Form.Label>\n                <Form.Control \n                  as=\"select\"\n                  value={formData.petalLength}\n                  name=\"petalLength\"\n                  onChange={this.handleChange}>\n                  {petalLengths}\n                </Form.Control>\n              </Form.Group>\n              <Form.Group as={Col}>\n                <Form.Label>Petal Width</Form.Label>\n                <Form.Control \n                  as=\"select\"\n                  value={formData.petalWidth}\n                  name=\"petalWidth\"\n                  onChange={this.handleChange}>\n                  {petalWidths}\n                </Form.Control>\n              </Form.Group>\n            </Form.Row>\n            <Row>\n              <Col>\n                <Button\n                  block\n                  variant=\"success\"\n                  disabled={isLoading}\n                  onClick={!isLoading ? this.handlePredictClick : null}>\n                  { isLoading ? 'Making prediction' : 'Predict' }\n                </Button>\n              </Col>\n              <Col>\n                <Button\n                  block\n                  variant=\"danger\"\n                  disabled={isLoading}\n                  onClick={this.handleCancelClick}>\n                  Reset prediction\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n          {result === \"\" ? null :\n            (<Row>\n              <Col className=\"result-container\">\n                <h5 id=\"result\">{result}</h5>\n              </Col>\n            </Row>)\n          }\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}